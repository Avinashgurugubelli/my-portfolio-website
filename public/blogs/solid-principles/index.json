{
  "label": "solid-principles",
  "type": "directory",
  "title": "SOLID Principles",
  "description": "A guide to the SOLID principles of object-oriented design.",
  "author": "Avinash Gurugubelli",
  "date": "2023-10-01",
  "tags": [
    "SOLID",
    "principles",
    "design"
  ],
  "id": "solid-principles",
  "children": [
    {
      "id": "01-introduction-md",
      "label": "01-introduction.md",
      "type": "file",
      "path": "blogs/solid-principles/01-introduction.md",
      "date": "July 3, 2025",
      "createdOn": "2025-07-03 15:06:05",
      "author": "Avinash Gurugubelli",
      "title": "Introduction to SOLID Principles in OOP",
      "description": "An overview of the SOLID design principles and how they help build maintainable, scalable, and clean object-oriented software.",
      "tags": [
        "SOLID",
        "OOP",
        "Clean Code",
        "Object-Oriented Design",
        "Software Principles"
      ],
      "references": []
    },
    {
      "id": "02-single-responsibility-principle-md",
      "label": "02-single-responsibility-principle.md",
      "type": "file",
      "path": "blogs/solid-principles/02-single-responsibility-principle.md",
      "date": "July 3, 2025",
      "createdOn": "2025-07-03 15:06:05",
      "author": "Avinash Gurugubelli",
      "title": "Single Responsibility Principle",
      "description": "Understanding the Single Responsibility Principle and how it helps in building focused, modular, and testable classes in object-oriented programming.",
      "tags": [
        "SOLID",
        "SRP",
        "Java",
        "Clean Code",
        "Software Design"
      ],
      "references": []
    },
    {
      "id": "03-dependency-inversion-principle-md",
      "label": "03-dependency-inversion-principle.md",
      "type": "file",
      "path": "blogs/solid-principles/03-dependency-inversion-principle.md",
      "date": "July 3, 2025",
      "createdOn": "2025-07-03 15:06:05",
      "author": "Avinash Gurugubelli",
      "title": "Dependency Inversion Principle",
      "description": "Learn how the Dependency Inversion Principle helps decouple high-level and low-level modules using interfaces and abstractions.",
      "tags": [
        "SOLID",
        "DIP",
        "Dependency Injection",
        "Abstraction",
        "Java"
      ],
      "references": []
    },
    {
      "id": "04-interface-segregation-principle-md",
      "label": "04-interface-segregation-principle.md",
      "type": "file",
      "path": "blogs/solid-principles/04-interface-segregation-principle.md",
      "date": "July 3, 2025",
      "createdOn": "2025-07-03 15:06:05",
      "author": "Avinash Gurugubelli",
      "title": "Interface Segregation Principle",
      "description": "Exploring Interface Segregation Principle with examples to reduce fat interfaces and improve code decoupling.",
      "tags": [
        "SOLID",
        "ISP",
        "Interface Design",
        "Java",
        "OOP"
      ],
      "references": []
    },
    {
      "id": "05-open-close-principle-md",
      "label": "05-open-close-principle.md",
      "type": "file",
      "path": "blogs/solid-principles/05-open-close-principle.md",
      "date": "July 3, 2025",
      "createdOn": "2025-07-03 15:06:05",
      "author": "Avinash Gurugubelli",
      "title": "Open Closed Principle",
      "description": "Learn how the Open/Closed Principle enables extending software behavior without modifying existing code, demonstrated with Java.",
      "tags": [
        "SOLID",
        "OCP",
        "Open Closed Principle",
        "Java",
        "Object-Oriented Design"
      ],
      "references": []
    },
    {
      "id": "06-liskov-substitution-principle-md",
      "label": "06-liskov-substitution-principle.md",
      "type": "file",
      "path": "blogs/solid-principles/06-liskov-substitution-principle.md",
      "date": "July 3, 2025",
      "createdOn": "2025-07-03 15:06:05",
      "author": "Avinash Gurugubelli",
      "title": "Liskov Substitution Principle",
      "description": "A practical take on the Liskov Substitution Principle using a Bird/Ostrich example to demonstrate behavioral contracts in inheritance.",
      "tags": [
        "SOLID",
        "LSP",
        "Java",
        "Inheritance",
        "Object-Oriented Programming"
      ],
      "references": []
    }
  ]
}