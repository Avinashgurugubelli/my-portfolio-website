import{l as d}from"./index-BKp4nMYa.js";class u{static async fetchBlogsData(){return Promise.resolve(d)}static async fetchNestedBlogIndex(e){const t=await fetch(e);if(!t.ok)throw new Error(`Failed to fetch blog index: ${e}`);return t.json()}static async fetchBlogContent(e){const t=await fetch(e.startsWith("/")?e:`/${e}`);if(!t.ok)throw new Error(`Failed to fetch blog content: ${e}`);return t.text()}static findBlogItemByPath(e,t){if(t.length===0)return null;console.log("Finding item by path segments:",t);const n=decodeURIComponent(t[0]);console.log("Current segment:",n);const r=e.find(o=>{var s;const l=o.id===n,c=o.title.toLowerCase().replace(/[^\w\s]/g,"").replace(/\s+/g,"-")===n.toLowerCase(),i=o.title.toLowerCase()===n.toLowerCase();if(o.type==="file"){const a=o.path.toLowerCase().includes(n.toLowerCase()),h=((s=o.path.split("/").pop())==null?void 0:s.replace(".md","").toLowerCase())===n.toLowerCase();return console.log(`File ${o.id}: idMatch=${l}, titleMatch=${c}, pathMatch=${a}, filenameMatch=${h}`),l||c||i||a||h}return console.log(`Directory ${o.id}: idMatch=${l}, titleMatch=${c}, directTitleMatch=${i}`),l||c||i});return console.log("Found item:",r),r?t.length===1?r:r.type==="directory"&&r.children?this.findBlogItemByPath(r.children,t.slice(1)):null:(console.log("Item not found, available items:",e.map(o=>({id:o.id,title:o.title,type:o.type}))),null)}static generateBlogPath(e){var t;return((t=e==null?void 0:e.title)==null?void 0:t.toLowerCase().replace(/[^\w\s]/g,"").replace(/\s+/g,"-"))||""}static findItemPath(e,t,n=[]){for(const r of e){if(r.id===t.id)return[...n,this.generateBlogPath(r)];if(r.type==="directory"&&r.children){const o=this.findItemPath(r.children,t,[...n,this.generateBlogPath(r)]);if(o)return o}}return null}}export{u as B};
