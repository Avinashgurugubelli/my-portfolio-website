import{l as d}from"./index-Cv8_xXqY.js";class u{static async fetchBlogsData(){return Promise.resolve(d)}static async fetchNestedBlogIndex(e){const o=await fetch(e);if(!o.ok)throw new Error(`Failed to fetch blog index: ${e}`);return o.json()}static async fetchBlogContent(e){const o=await fetch(e.startsWith("/")?e:`/${e}`);if(!o.ok)throw new Error(`Failed to fetch blog content: ${e}`);return o.text()}static findBlogItemByPath(e,o){if(o.length===0)return null;console.log("Finding item by path segments:",o);const n=decodeURIComponent(o[0]);console.log("Current segment:",n);const r=e.find(t=>{var s;const i=t.id===n,l=t.title.toLowerCase().replace(/[^\w\s]/g,"").replace(/\s+/g,"-")===n.toLowerCase(),c=t.title.toLowerCase()===n.toLowerCase();if(t.type==="file"){const a=t.path.toLowerCase().includes(n.toLowerCase()),h=((s=t.path.split("/").pop())==null?void 0:s.replace(".md","").toLowerCase())===n.toLowerCase();return console.log(`File ${t.id}: idMatch=${i}, titleMatch=${l}, pathMatch=${a}, filenameMatch=${h}`),i||l||c||a||h}return console.log(`Directory ${t.id}: idMatch=${i}, titleMatch=${l}, directTitleMatch=${c}`),i||l||c});return console.log("Found item:",r),r?o.length===1?r:r.type==="directory"&&r.children?this.findBlogItemByPath(r.children,o.slice(1)):null:(console.log("Item not found, available items:",e.map(t=>({id:t.id,title:t.title,type:t.type}))),null)}static generateBlogPath(e){return e.title.toLowerCase().replace(/[^\w\s]/g,"").replace(/\s+/g,"-")}static findItemPath(e,o,n=[]){for(const r of e){if(r.id===o.id)return[...n,this.generateBlogPath(r)];if(r.type==="directory"&&r.children){const t=this.findItemPath(r.children,o,[...n,this.generateBlogPath(r)]);if(t)return t}}return null}}export{u as B};
